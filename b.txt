<?php
/*-------------------- coding: utf-8 ---------------------------
 * hmPeach 2.0.0.6用 ライブラリ
 * Copyright (c) 2021-2022 Akitsugu Komiyama
 * under the Apache License Version 2.0
 *
 * This product includes PHP, freely available from
 * <http://www.php.net/>.
 *--------------------------------------------------------------
 */

class _TEdit {

    /**
     * 現在編集しているテキストのファイルのフルパスを取得する。
     * 無題の時は空文字が返ってくる。
     */
    public function getFilePath(): string {
        return hidemaru_edit_getfilepath();
   

    /**
     * 現在のテキスト内容全体を取得する。
     */
    public function getTotalText(): string {
        return hidemaru_edit_gettotaltext();
   

    /**
     * 現在のテキスト内容全体を、指定の文字列へと置き換える。
     */
    public function setTotalText(string $text): bool {
        return hidemaru_edit_settotaltext($text);
   

    /**
     * 単純選択している内容を取得する（複数選択や矩形選択は対象外）
     */
    public function getSelectedText(): string {
        return hidemaru_edit_getselectedtext();
   

    /**
     * 単純選択している内容のテキストの内容を、指定のテキストへと置き換える
     */
    public function setSelectedText(string $text): bool {
        return hidemaru_edit_setselectedtext($text);
   

    /**
     * カーソルがある行のテキスト内容を取得する
     */
    public function getLineText(): string {
        return hidemaru_edit_getlinetext();
   

    /**
     * カーソルがある行のテキスト内容を、指定の文字列へと置き換える 
     */
    public function setLineText(string $text): bool {
        return hidemaru_edit_setlinetext($text);
   

    /**
     * Unicode勘定のlinenoとcolumnを得る。
     */
    public function getCursorPos(): array {
        $pos = hidemaru_edit_getcursorpos();
        return $pos;
   

    /**
     * マウスの位置に対応する「Unicode勘定のlinenoとcolumn」を得る。
     */
    public function getMousePos(): array {
        $pos = hidemaru_edit_getcursorposfrommousepos();
        return $pos;
   
}

class _TFlagsEncode {
    public $Sjis = 0x01;
    public $Utf16 = 0x02;
    public $Euc = 0x03;
    public $Jis = 0x04;
    public $Utf7 = 0x05;
    public $Utf8 = 0x06;
    public $Utf16_be = 0x07;
    public $Euro = 0x08;
    public $Gb2312 = 0x09;
    public $Big5 = 0x0a;
    public $Euckr = 0x0b;
    public $Johab = 0x0c;
    public $Easteuro = 0x0d;
    public $Baltic = 0x0e;
    public $Greek = 0x0f;
    public $Russian = 0x10;
    public $Symbol = 0x11;
    public $Turkish = 0x12;
    public $Hebrew = 0x13;
    public $Arabic = 0x14;
    public $Thai = 0x15;
    public $Vietnamese = 0x16;
    public $Mac = 0x17;
    public $Oem = 0x18;
    public $Default = 0x19;
    public $Utf32 = 0x1b;
    public $Utf32_be = 0x1c;
    public $Binary = 0x1a;
    public $LF = 0x40;
    public $CR = 0x80;

    public $Bom = 0x0600;
    public $NoBom = 0x0400;
    public $Selection = 0x2000;

    public $NoAddHist = 0x0100;
    public $WS = 0x0800;
    public $WB = 0x1000;
}

class _TFlagsSearchOption {
    public $Word = 0x00000001;
    public $Casesense = 0x00000002;
    public $NoCasesense = 0x00000000;
    public $Regular = 0x00000010;
    public $NoRegular = 0x00000000;
    public $Fuzzy = 0x00000020;
    public $Hilight = 0x00003800;
    public $NoHilight = 0x00002000;
    public $LinkNext = 0x00000080;
    public $Loop = 0x01000000;

    public $MaskComment = 0x00020000;
    public $MaskIfdef = 0x00040000;
    public $MaskNormal = 0x00010000;
    public $MaskScript = 0x00080000;
    public $MaskString = 0x00100000;
    public $MaskTag = 0x00200000;
    public $MaskOnly = 0x00400000;
    public $FEnableMaskFlags = 0x00800000;

    public $FEnableReplace = 0x00000004;
    public $Ask = 0x00000008;
    public $NoClose = 0x02000000;

    public $SubDir = 0x00000100;
    public $Icon = 0x00000200;
    public $Filelist = 0x00000040;
    public $FullPath = 0x00000400;
    public $OutputSingle = 0x10000000;
    public $OutputSameTab = 0x20000000;

    public $BackUp = 0x04000000;
    public $Preview = 0x08000000;

    public $FEnableSearchOption2 = 0x80000000;
}

class _TFlagsSearchOption2 {
    public $UnMatch = 0x00000001;
    public $InColorMarker = 0x00000002;
    public $FGrepFormColumn = 0x00000008;
    public $FGrepFormHitOnly = 0x00000010;
    public $FGrepFormSortDate = 0x00000020;
}

class _TFlags {
    public $Encode;
    public $SearchOption;
    public $SearchOption2;

    public function __construct() {
        $this->Encode = new _TFlagsEncode();
        $this->SearchOption = new _TFlagsSearchOption();
        $this->SearchOption2 = new _TFlagsSearchOption2();
   
}

class _TMacroStatement {
    public function __call($statement_name, $args) {
       return $Hm->Macro->__Statement($statement_name, $args[0]);
   
}
class _TMacroFunction {
    public function __call($function_name, $args) {
       return $Hm->Macro->__Function($function_name, $args[0]);
   
}

class _TMacro {

    public $doStatement;
    public $doFunction;
    public $Flags;

    public function __construct() {
        $this->doStatement = new _TMacroStatement();
        $this->doFunction = new _TMacroFunction();
        $this->Flags = new _TFlags();
   
    /**
     * 秀丸マクロ実行中かどうかの判定。原則的に、hmPeachではtrueが返る。
     */
    public function isExecuting(): bool {
        return hidemaru_macro_isexecuting();
   

    /**
     * 秀丸マクロ変数(もしくはシンボル)の値を取得する。
     */
    public function getVar(string $simbol): string|int {
        if ( is_string($simbol) ) {
            return hidemaru_macro_getvar($simbol);
        } else {
            new TypeError($simbol);
       
   

    /**
     * 秀丸マクロ変数に、指定の数値もしくは文字列を代入する。
     */
    public function setVar(string $simbol, string|int|float|bool $value): bool {
        if ( is_string($simbol) ) {
            if (is_bool($value) || is_float($value)) {
                $value = intval($value); // 一度整数にまるめてから...
                return hidemaru_macro_setvar($simbol, strval($value));
            } else {
                return hidemaru_macro_setvar($simbol, strval($value));
           
        } else {
            new TypeError($simbol);
       
   

    /**
     * 秀丸マクロを文字列で実行する。
     * 「シングルクォーテーション」の「ヒアドキュメント」で記述するのがオススメ。
     */
    public function doEval(string $expression): array {
        $success = hidemaru_macro_eval($expression);
        if ($success) {
            return array($success, null, "");
        } else {
            return array(0, new RuntimeException("Hidemaru Macro doEval(...):\n" . $expression), "");
       
   


    function doProxyMethod(string $name, string $t, $args[0]) {
        if ($t == "fn" ||  $t == "fs") {
            $count = count($args);
            if ($count == 0) {
                return $Hm->Macro->getVar($name);
           
            else if ($count > 0) {
                list($_result, $_args, $_error, $_message) = $this->__Function($name, $args[0]);
                return $_result;
           
       
        else if ($t == "fs0") {
            list($_result, $_args, $_error, $_message) = $this->__Function($name, $args[0]);
            return $_result;
       
        else if ($t == "fsn") {
            $count = count($args);
            if ($count == 0) {
                return $Hm->Macro->getVar($name);
           
            else if ($count > 0) {
                list($_result, $_args, $_error, $_message) = $this->__Function($name, $args[0]);
                return $_result;
           
       
        else if ($t == "fn1s") {
            $list_args = $args;
            $count = count($list_args);
            if ($count >= 1) {
                $list_args[0] = "$args[0]";
           
            list($_result, $_args, $_error, $_message) = $this->__Function($name, ...$list_args);
            return $_result;
       
        else if ($t == "fn1s2s") {
            $list_args = $args;
            $count = count($list_args);
            if ($count >= 1) {
                $list_args[0] = "$args[0]";
           
            if ($count >= 2) {
                $list_args[1] = "$args[1]";
           
            list($_result, $_args, $_error, $_message) = $this->__Function($name, ...$list_args);
            return $_result;
       
        else if ($t == "st") {
            list($_result, $_args, $_error, $_message) = $this->__Statement($name, $args[0]);
            return $_result;
       
        else if ($t == "st1s") {
            $list_args = $args;
            $count = count($list_args);
            if ($count >= 1) {
                $list_args[0] = "$args[0]";
           
            list($_result, $_args, $_error, $_message) = $this->__Statement($name, ...$list_args);
            return $_result;
       
        else if ($t == "st1s2s") {
            $list_args = $args;
            $count = count($list_args);
            if ($count >= 1) {
                $list_args[0] = "$args[0]";
           
            if ($count >= 2) {
                $list_args[1] = "$args[1]";
           
            list($_result, $_args, $_error, $_message) = $this->__Statement($name, ...$list_args);
            return $_result;
       
   

    function __Function(string $function_name, $args[0]): array {

        list($args_key, $args_value) = $this->_setMacroVarAndMakeMacroKeyArray($args);

        $arg_varname_join = join(',', $args_key);
        $expression = $function_name . '(' . $arg_varname_join . ')';
        list($success, $result) = hidemaru_macro_eval_function($expression);

        $args_result = $this->_clearMacroVarAndUpdateArgs($args_key, $args_value);
        if ($success) {
            return array($result, $args_result, null, "");
        } else {
            return array(null, $args_result, new RuntimeException("Hidemaru Macro doFunction(...):\n" . $function_name), "");
       
   

    function __Statement(string $statement_name, $args[0]): array {

        list($args_key, $args_value) = $this->_setMacroVarAndMakeMacroKeyArray($args);

        $arg_varname_join = join(',', $args_key);
        $expression = $statement_name . ' ' . $arg_varname_join . ';';
        $result_array = $Hm->Macro->doEval($expression);
        $macro_result = $Hm->Macro->getVar("result");
        $args_result = $this->_clearMacroVarAndUpdateArgs($args_key, $args_value);
        if ($result_array[0] > 0) {
            return array($macro_result, $args_result, null, $result_array[2]);
       
        return array($result_array[0], $args_result, $result_array[1], $result_array[2]);
   

    private function _setMacroVarAndMakeMacroKeyArray(array $args) {
        $base_random = strval(rand (1, 10000));
        $curr_random = strval(rand (1, 10000));

        $args_key = array();
        $args_value = array();

        for ( $ix = 0; $ix < count($args); $ix++ ) {
            $item = $args[$ix];
            if ( is_int($item) || is_float($item) || is_bool($item) ) {
                $value = intval($item);
                $varname = '#AsMacroArs_' . strval($base_random) . '_' . strval($curr_random + $ix);
                array_push($args_key, $varname);
                array_push($args_value, $value);
                $Hm->Macro->setVar($varname, $value);
            } else if ( is_array($item) ) {
                array_push($args_value, $item);
                $intcheck_array = array_filter($item, function($elem) { return is_int($elem) || is_float($elem) || is_bool($elem); } );
                if (count($item) == count($intcheck_array) ) {
                    $varname = '#AsIntArrayOfMacroArs_' . strval($base_random) . '_' . strval($curr_random + $ix);
                    array_push($args_key, $varname);
                    for ( $aix = 0; $aix < count($item); $aix++ ) {
                        $elem = $item[$aix];
                        $value = intval($elem);
                        $index_varname = $varname . '[' . strval($aix) . ']';
                        $Hm->Macro->setVar($index_varname, $value);
                   
                } else {
                    $varname = '$AsStrArrayOfMacroArs_' . strval($base_random) . '_' . strval($curr_random + $ix);
                    array_push($args_key, $varname);
                    for ( $aix = 0; $aix < count($item); $aix++ ) {
                        $elem = $item[$aix];
                        $value = strval($elem);
                        $index_varname = $varname . '[' . strval($aix) . ']';
                        $Hm->Macro->setVar($index_varname, $value);
                   
               
            } else {
                $value = strval($item);
                $varname = '$AsMacroArs_' . strval($base_random) . '_' . strval($curr_random + $ix);
                array_push($args_key, $varname);
                array_push($args_value, $value);
                $Hm->Macro->setVar($varname, $value);
           
       

        return array($args_key, $args_value);
   

    private function _clearMacroVarAndUpdateArgs(array $args_key, array $args_value) {
        $args_result = array();

        for($ix = 0; $ix < count($args_key); $ix++) {
            $varname = $args_key[$ix];
            if ( strpos($varname, '#AsMacroArs_') === 0) {
                array_push( $args_result, $Hm->Macro->getVar($varname) );
                $Hm->Macro->setVar($varname, 0);
           
            else if ( strpos($varname, '$AsMacroArs_') === 0) {
                array_push( $args_result, $Hm->Macro->getVar($varname) );
                $Hm->Macro->setVar($varname, "");
           
            else if ( strpos($varname, '#AsIntArrayOfMacroArs_') === 0) {
                $arr = $args_value[$ix];
                array_push( $args_result, $arr );
                for($aix = 0; $aix < count($arr); $aix++) {
                    $index_varname = $varname . '[' . strval($aix) . ']';
                    $Hm->Macro->setVar($index_varname, 0);
               
           
            else if ( strpos($varname, '$AsStrArrayOfMacroArs_') === 0) {
                $arr = $args_value[$ix];
                array_push( $args_result, $arr );
                for($aix = 0; $aix < count($arr); $aix++) {
                    $index_varname = $varname . '[' . strval($aix) . ']';
                    $Hm->Macro->setVar($index_varname, "");
               
           
       

        return $args_result;
   

}

class _TOutputPane {
    /**
     * アウトプット枠への出力
     */
    public function output(string $message): bool {
        $mod_message = str_replace("\n", "\r\n", $message);
        $mod_message = str_replace("\r\r", "\r", $mod_message);
        return hidemaru_outputpane_output($mod_message);
   

    /**
     * アウトプット枠のクリア
     */
    public function clear(): int {
        return hidemaru_outputpane_clear();
   

    /**
     * アウトプット枠の内容を一時的に対比し、アウトプット枠をクリア
     */
    public function push(): bool {
        return hidemaru_outputpane_push();
   

    /**
     * push()で一時的に退避しておいた内容を、アプトプット枠へと復元
     */
    public function pop(): bool {
        return hidemaru_outputpane_pop();
   

    /**
     * アウトプット枠出力となる際ベースとなるディレクトリを変更する。
     * ジャンプタグ形式などの際に影響を与える
     */
    public function setBaseDir(string $dirpath): bool {
        return hidemaru_outputpane_setbasedir($dirpath);
   

    /**
     * アウトプット枠へと命令を送信する。
     * アウトプット枠のコマンド値一覧
     *
     * 1001 枠を閉じる
     * 1002 中断
     * 1005 検索
     * 1006 次の結果
     * 1007 前の結果
     * 1008 タグジャンプ
     * 1009 クリア
     * 1010 下候補
     * 1011 上候補
     * 1013 すべてコピー
     * 1014 レジストリ変更を元に色を更新（V8.30以降）
     * 1015 先頭にカーソル移動（V8.89以降）
     * 1016 最後にカーソル移動（V8.89以降）
     * 1100 位置：左
     * 1101 位置：右
     * 1102 位置：上
     * 1103 位置：下
     */
    public function sendMessage(int $command): int {
        return hidemaru_outputpane_sendmessage($command);
   

    /**
     * アウトプット枠のウィンドウハンドル。
     * 通常はスクリプト層から利用することはないが、win32ウィンドウ関連プログラムを組む際には必要となる。
     */
    public function getWindowHandle(): int {
        return hidemaru_outputpane_getwindowhandle();
   
}

class _TExplorerPane {
    /**
     * ファイルマネージャ枠のモード設定
     */
    public function setMode(int $mode): bool {
        return hidemaru_explorerpane_setmode($mode);
   

    /**
     * ファイルマネージャ枠のモード取得
     */
    public function getMode(): int {
        return hidemaru_explorerpane_getmode();
   

    /**
     * ファイルマネージャ枠にプロジェクトを読み込み
     */
    public function loadProject(string $filepath): bool {
        return hidemaru_explorerpane_loadproject($filepath);
   

    /**
     * ファイルマネージャ枠のプロジェクトを保存
     */
    public function saveProject(string $filepath): bool {
        return hidemaru_explorerpane_saveproject($filepath);
   

    /**
     * ファイルマネージャ枠のプロジェクトのファイルパスを取得する
     */
    public function getProject(): string {
        return hidemaru_explorerpane_getproject();
   

    /**
     * ファイルマネージャ枠のカレントディレクトリ
     */
    public function getCurrentDir(): string {
        return hidemaru_explorerpane_getcurrentdir();
   


    /**
     * ファイルマネージャ枠の表示がプロジェクトのとき、更新された状態であるかどうかを返します。
     */
    public function getUpdated(): bool {
        return hidemaru_explorerpane_getupdated();
   

    /**
     * ファイルマネージャ枠へと命令を送信する。
     * ファイルマネージャ枠枠のコマンド値一覧
     *
     * 200 フォルダモード
     * 201 ファイル一覧モード
     * 202 ヒストリモード
     * 203 ウィンドウ一覧モード
     * 204 ブックマークモード
     * 205 プロジェクトモード
     * 206 フォルダ+ファイル一覧モード
     * 251 フォルダ/ファイル一覧：１つ上のフォルダへ
     * 252 同期
     * 254 枠を閉じる
     * 256 フォルダ/ファイル一覧：アドレスバー
     * 257 ツールバー：自動
     * 258 ツールバー：常にON
     * 259 ツールバー：常にOFF
     * 260 アドレスバーにフォーカス
     * 262 フォルダ/ファイル一覧：コピー
     * 263 フォルダ/ファイル一覧：切り取り
     * 264 フォルダ/ファイル一覧：貼り付け
     * 265 フォルダ/ファイル一覧：削除
     * 266 フォルダ/ファイル一覧：プロパティ
     * 267 位置：左
     * 268 位置：右
     * 269 位置：上
     * 270 位置：下
     * 300 フォルダ/ファイル一覧：ここを親にする
     * 301 フォルダ/ファイル一覧：デスクトップを親にする
     * 302 フォルダのファイル表示：なし
     * 303 フォルダのファイル表示：全て
     * 304 フォルダのファイル表示：既定のワイルドカード
     * 305 フォルダのファイル表示：カスタム
     * 400 フォルダ/ファイル一覧：サブフォルダも表示
     * 402 ファイル一覧のファイル表示：全て
     * 403 ファイル一覧のファイル表示：既定のワイルドカード
     * 404 ファイル一覧のファイル表示：カスタム
     * 450 フォルダ/ファイル一覧：フォルダ表示ON/OFF
     * 503 ヒストリ：削除
     * 510 ヒストリ：ヒストリ項目１～
     * 701 ブックマーク：ブックマークの整理
     * 800 プロジェクト：開く
     * 801 プロジェクト：名前を付けて保存
     * 802 プロジェクト：上書き保存
     * 803 プロジェクト：閉じる
     * 900 プロジェクト：追加
     * 901 プロジェクト：削除
     * 902 プロジェクト：上へ
     * 903 プロジェクト：下へ
     */
    public function sendMessage(int $command): int {
        return hidemaru_explorerpane_sendmessage($command);
   

    /**
     * アウトプット枠のウィンドウハンドル。
     * 通常はスクリプト層から利用することはないが、win32ウィンドウ関連プログラムを組む際には必要となる。
     */
    public function getWindowHandle(): int {
        return hidemaru_explorerpane_getwindowhandle();
   
}

class _THidemaru {

    /**
     * 編集領域関連
     */
    public $Edit;

    /**
     * マクロ関連
     */
    public $Macro;

    /**
     * アウトプット枠関連
     */
    public $OutputPane;

    /**
     * ファイルマネージャ枠関連
     */
    public $ExplorerPane;

    public function __construct() {
        $this->Edit = new _TEdit();
        $this->Macro = new _TMacro();
        $this->OutputPane = new _TOutputPane();
        $this->ExplorerPane = new _TExplorerPane();
   

    /**
     * 秀丸エディタのバージョンの取得。
     * 秀丸エディタ 「8.73 正式版」⇒「873.99」、「8.74 β6」⇒「874.06」といった浮動小数値が返ってくる。
     */
    public function getVersion(): float {
        return hidemaru_version();
   

    /**
     * 秀丸のウィンドウハンドル。hidemaruhandle(0)と同じ値。
     */
    public function getWindowHandle(): int {
        return hidemaru_getwindowhandle();
   

    /**
     * hmPeach.dll が解放される直前のタイミングで実行されるメソッド。
     */
    public function onDisposeScope(): void {
        if (function_exists("onDestroyScope")) {
            onDestroyScope();
       
   

}

$Hm = new _THidemaru();


}


# ２つの値を返す
    function enumregvalue{
        list($_result, $_args, $_error, $_message) = $Hm->Macro->doFunction->enumregvalue;
        return array($_result, $_args[1]);
   
}

# ２つの値を返す
if (!function_exists("getlinecount")) {
    function getlinecount{
        list($_result, $_args, $_error, $_message) = $Hm->Macro->doFunction->getlinecount;
        return array($_result, $_args[2]);
   
}


if (!function_exists("getresultex")) {
    function getresultex{ 
        // この時だけ文字列が返る
        if ($args[0] == -1) {
            return getresultex_rstr;
       
        else {
            return $hm::Macro::FuncProxy("getresultex", "fsn", $args[0]);
       
   
    function getresultex_rstr{ 
        $Hm->Macro->setVar('#__getresultex_rstr_arg0__', $args[0]);
        $eval_ret = $Hm->Macro->doEval('$__temp_getresultex_rstr__ = getresultex(#__getresultex_rstr_arg0__);');
        $func_ret = $Hm->Macro->getVar('$__temp_getresultex_rstr__');
        $Hm->Macro->setVar('$__temp_getresultex_rstr__', '');
        $Hm->Macro->setVar('#__getresultex_rstr_arg0__', 0);
        return $func_ret;
   
}

if (!function_exists("geteventparam")) {
    function geteventparam{ 
        // この時だけ文字列が返る
        if ($args[0] == 0 && event() == 9) {
            return geteventparam_rstr;
       
        else {
            return $hm::Macro::FuncProxy("geteventparam", "fsn", $args[0]);
       
   
    function geteventparam_rstr {
        $Hm->Macro->setVar('#__geteventparam_rstr_arg0__', $args[0]);
        $eval_ret = $Hm->Macro->doEval('$__temp_geteventparam_rstr__ = geteventparam(#__geteventparam_rstr_arg0__);');
        $func_ret = $Hm->Macro->getVar('$__temp_geteventparam_rstr__');
        $Hm->Macro->setVar('$__temp_geteventparam_rstr__', '');
        $Hm->Macro->setVar('#__geteventparam_rstr_arg0__', 0);
        return $func_ret;
   
}

if (!function_exists("getconfig")) {
    # 特に問題はないだろうから、文字列のみで返すようにする
    function getconfig {
        $Hm->Macro->setVar('$__getconfig_rstr_arg0__', $args[0]);
        $eval_ret = $Hm->Macro->doEval('$__temp_getconfig_rstr__ = getconfig($__getconfig_rstr_arg0__);');
        $func_ret = $Hm->Macro->getVar('$__temp_getconfig_rstr__');
        $Hm->Macro->setVar('$__temp_getconfig_rstr__', '');
        $Hm->Macro->setVar('#__getconfig_rstr_arg0__', 0);
        return $func_ret;
   

    # 数値型で欲しい場合には、こちらを使えば、数値に変換可能なら数値型に変換して返す。
    function getconfig_rnum {
        $ret = getconfig;
        try {
            $num = intval($ret);
            if ("$num" == $ret ) {
                return $num;
           
        } catch(e) {

       
        return 0;
   
}

if (!function_exists("member_rnum")) {
    function member_rnum {
        $arg_name_list = [];
        for($i=0; $i<count($args); $i++) {
            $arg = $args[$i];
            $typename = gettype($arg);
            if ($typename == gettype(true) || $typename == gettype(10) || $typename == gettype(10.5)) {
                $var_name = '#__member_rnum_arg' . "$i" . "__";
                array_push($arg_name_list, $var_name);
                $Hm->Macro->setVar($var_name, intval($arg));
            } else {
                $var_name = '$__member_rnum_arg' . "$i" . "__";
                array_push($arg_name_list, $var_name);
                $Hm->Macro->setVar($var_name, "$arg");
           
       

        $var_arg_list = join(', ', $arg_name_list);
        $eval_ret = $Hm->Macro->doEval('#__temp_member_rnum__ = member( ' . $var_arg_list . ');');
        $func_ret = $Hm->Macro->getVar('#__temp_member_rnum__');
        $Hm->Macro->setVar('#__temp_member_rnum__',  0);

        foreach($arg_name_list as $var_name) {
            if (str_starts_with($var_name, '#')) {
                $Hm->Macro->setVar($var_name, 0);
            } else {
                $Hm->Macro->setVar($var_name, "");
           
       

        return $func_ret;
   
}

if (!function_exists("member_rstr")) {
    function member_rstr {
        $arg_name_list = [];
        for($i=0; $i<count($args); $i++) {
            $arg = $args[$i];
            $typename = gettype($arg);
            if ($typename == gettype(true) || $typename == gettype(10) || $typename == gettype(10.5)) {
                $var_name = '#__member_rstr_arg' . "$i" . "__";
                array_push($arg_name_list, $var_name);
                $Hm->Macro->setVar($var_name, intval($arg));
            } else {
                $var_name = '$__member_rstr_arg' . "$i" . "__";
                array_push($arg_name_list, $var_name);
                $Hm->Macro->setVar($var_name, "$arg");
           
       

        $var_arg_list = join(', ', $arg_name_list);
        $eval_ret = $Hm->Macro->doEval('$__temp_member_rstr__ = member( ' . $var_arg_list . ');');
        $func_ret = $Hm->Macro->getVar('$__temp_member_rstr__');
        $Hm->Macro->setVar('$__temp_member_rstr__',  "");

        foreach($arg_name_list as $var_name) {
            if (str_starts_with($var_name, '#')) {
                $Hm->Macro->setVar($var_name, 0);
            } else {
                $Hm->Macro->setVar($var_name, "");
           
       

        return $func_ret;
   
}
?>